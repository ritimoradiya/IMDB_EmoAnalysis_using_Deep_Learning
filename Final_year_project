{"cells":[{"cell_type":"markdown","metadata":{"id":"PVa0PkVnFF7j"},"source":["# Installing Packages"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":55558,"status":"ok","timestamp":1714798059711,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"VU-Tv7oBcgLA","outputId":"4b99d7c0-d4d9-45f7-80c4-620207a583da"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8078,"status":"ok","timestamp":1714798072405,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"pFIGZ9G6cv5d","outputId":"78b68843-2ded-41e6-bfca-0bdff3a8f406"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: tensorflow in /usr/local/lib/python3.10/dist-packages (2.15.0)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: flatbuffers>=23.5.26 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.3.25)\n","Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.5.4)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.9.0)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (18.1.1)\n","Requirement already satisfied: ml-dtypes~=0.2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: numpy<2.0.0,>=1.23.5 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.25.2)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.3.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.0)\n","Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.20.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow) (67.7.2)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.4.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (4.11.0)\n","Requirement already satisfied: wrapt<1.15,>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.14.1)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.37.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.63.0)\n","Requirement already satisfied: tensorboard<2.16,>=2.15 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.15.2)\n","Requirement already satisfied: tensorflow-estimator<2.16,>=2.15.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.15.0)\n","Requirement already satisfied: keras<2.16,>=2.15.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.15.0)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow) (0.43.0)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (2.27.0)\n","Requirement already satisfied: google-auth-oauthlib<2,>=0.5 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (1.2.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (3.6)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (2.31.0)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (0.7.2)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (3.0.2)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (5.3.3)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (0.4.0)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (4.9)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow) (1.3.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (2024.2.2)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.16,>=2.15->tensorflow) (2.1.5)\n","Requirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (0.6.0)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow) (3.2.2)\n"]}],"source":["!pip install tensorflow"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":21553,"status":"ok","timestamp":1714798125583,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"dyU8rXbSc_fj","outputId":"c113fab5-be71-4617-f471-b660a22f34e9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting keras==2.14.0\n","  Downloading keras-2.14.0-py3-none-any.whl (1.7 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m9.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: keras\n","  Attempting uninstall: keras\n","    Found existing installation: keras 2.15.0\n","    Uninstalling keras-2.15.0:\n","      Successfully uninstalled keras-2.15.0\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","tensorflow 2.15.0 requires keras<2.16,>=2.15.0, but you have keras 2.14.0 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed keras-2.14.0\n"]}],"source":["!pip install keras==2.14.0"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3411,"status":"ok","timestamp":1714798136554,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"rWKKIalzdEWS","outputId":"3375a368-3c31-4a81-8034-bd2660126d38"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting keras_preprocessing\n","  Downloading Keras_Preprocessing-1.1.2-py2.py3-none-any.whl (42 kB)\n","\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/42.6 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m42.6/42.6 kB\u001b[0m \u001b[31m1.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy>=1.9.1 in /usr/local/lib/python3.10/dist-packages (from keras_preprocessing) (1.25.2)\n","Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from keras_preprocessing) (1.16.0)\n","Installing collected packages: keras_preprocessing\n","Successfully installed keras_preprocessing-1.1.2\n"]}],"source":["!pip install keras_preprocessing"]},{"cell_type":"markdown","metadata":{"id":"I1TDt0mHFNsN"},"source":["# Importing Libraries"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"nDYK7QfOdHcD","executionInfo":{"status":"ok","timestamp":1714798146221,"user_tz":-330,"elapsed":6088,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import re\n","import nltk\n","from nltk.corpus import stopwords\n","from numpy import array\n","import tensorflow as tf\n","\n","from keras_preprocessing.text import one_hot, Tokenizer\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Activation\n","from keras.layers import Embedding, LSTM, Bidirectional\n","from sklearn.model_selection import train_test_split\n","from keras_preprocessing.sequence import pad_sequences"]},{"cell_type":"markdown","metadata":{"id":"4-w3-sM4FobI"},"source":["# Loading dataset and EDA"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"zVCc_akudOk3","executionInfo":{"status":"ok","timestamp":1714798238701,"user_tz":-330,"elapsed":6,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"}}},"outputs":[],"source":["movie_reviews = \"/content/drive/MyDrive/Final Year Project/IMDB Dataset.csv\""]},{"cell_type":"code","execution_count":11,"metadata":{"id":"eK2nmUgBgNyD","executionInfo":{"status":"ok","timestamp":1714798244985,"user_tz":-330,"elapsed":3291,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"}}},"outputs":[],"source":["movie_reviews = pd.read_csv(movie_reviews)"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1714798246497,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"Rei9JpDZd2ng","outputId":"7951050d-4966-418c-ebc7-300f853640d2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(50000, 2)"]},"metadata":{},"execution_count":12}],"source":["movie_reviews.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":1223,"status":"ok","timestamp":1714366627327,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"niAWRGDjd5hT","outputId":"bec4f95c-8d8a-435e-86c2-67fb58d7c677"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                              review sentiment\n","0  One of the other reviewers has mentioned that ...  positive\n","1  A wonderful little production. <br /><br />The...  positive\n","2  I thought this was a wonderful way to spend ti...  positive\n","3  Basically there's a family where a little boy ...  negative\n","4  Petter Mattei's \"Love in the Time of Money\" is...  positive"],"text/html":["\n","  <div id=\"df-54a7de0e-0ec1-409b-ac5b-88fbd1d588eb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>review</th>\n","      <th>sentiment</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>One of the other reviewers has mentioned that ...</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>A wonderful little production. &lt;br /&gt;&lt;br /&gt;The...</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>I thought this was a wonderful way to spend ti...</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Basically there's a family where a little boy ...</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Petter Mattei's \"Love in the Time of Money\" is...</td>\n","      <td>positive</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-54a7de0e-0ec1-409b-ac5b-88fbd1d588eb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-54a7de0e-0ec1-409b-ac5b-88fbd1d588eb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-54a7de0e-0ec1-409b-ac5b-88fbd1d588eb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b07345f2-e698-4d3a-a0bd-69df1324529e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b07345f2-e698-4d3a-a0bd-69df1324529e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b07345f2-e698-4d3a-a0bd-69df1324529e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"movie_reviews","summary":"{\n  \"name\": \"movie_reviews\",\n  \"rows\": 50000,\n  \"fields\": [\n    {\n      \"column\": \"review\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 49583,\n        \"samples\": [\n          \"For some reason, various young couples hiking through the Italian Alps split up to see who can reach their campsite designation first. James (Gregory Lee Kenyon) enters a cave, finds a skeleton of an ancient demonic gladiator and becomes possessed by the spirit of \\\"Tyranus\\\" when he puts on a helmet belonging to the corpse. He then spends the rest of the film running around in the woods hunting down his friends and hacking off their limbs to add to some stew to bring the undead \\\"Demonicus\\\" back to life. This shot-on-digital Full Moon release is stupid, senseless, has terrible acting and sound and the (Los) Angeles National Forest is a poor substitute for Italy. However, it's pretty high on the unintentional laugh scale thanks mainly to the overwrought lead performance. Whether bug-eyed running around in cheap-looking armor brandishing a sword or spouting neurotic Latin gibberish about demons and resurrection, Kenyon's ridiculous facial expressions and awkward line delivery must be seen to be believed. Oh well, at least he's not boring like most of the rest of the cast.\",\n          \"This film tops the previous incarnation by a mile, taking everything to the next level. As always the JackAss guys are purely unbelievable, and I personally laughed harder in that theatre than I have in a long time. Like the first JackAss, this isn't so much a movie as an eighty minute long string of stunts and pranks. It is pure circus entertainment taken to the highest level. Essentially these guys are clowns, debasing themselves for the amusement of others. And its great. The shenanigans are so low, outrageous, and often disgusting that they transcend into a higher form of entertainment.<br /><br />You can't rate this along other movies, its in a class of its own. And it shines. Go and enjoy it for the pure spectacle that it is.\",\n          \"Monstervision was a show I grew up with. From late night hosting with Penn and Teller to the one, the only, Joe Bob Briggs. The show kept me up Friday nights back in my high school years, and provided some of the best drive-in memories to ever come outside of the drive-in.<br /><br />Without a doubt, the best late night television ever. If you didn't stay up, you were missing out.<br /><br />I know John Bloom and Joe Bob live on, but I want them back where they belong...MONSTERVISION! Question...did anyone else sit through all 4 hours of \\\"The Swarm\\\" ? q:)<br /><br />Long live Monstervision!\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sentiment\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"negative\",\n          \"positive\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":42}],"source":["movie_reviews.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"executionInfo":{"elapsed":660,"status":"ok","timestamp":1714366630212,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"_ULHqAyCF3SL","outputId":"2b2f67fd-2362-43a4-9b56-4692fec13a87"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                  review sentiment\n","43498  I'm guessing that the folks talking up this dr...  negative"],"text/html":["\n","  <div id=\"df-48e56cb2-8f05-4d98-bfb9-353b37f9bf82\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>review</th>\n","      <th>sentiment</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>43498</th>\n","      <td>I'm guessing that the folks talking up this dr...</td>\n","      <td>negative</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-48e56cb2-8f05-4d98-bfb9-353b37f9bf82')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-48e56cb2-8f05-4d98-bfb9-353b37f9bf82 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-48e56cb2-8f05-4d98-bfb9-353b37f9bf82');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"movie_reviews\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"review\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"I'm guessing that the folks talking up this drivel are cronies of the director or something. This is bad, and not in the Michael Jackson song kind of way. To compare the pacing of this movie to the progress of a snail would be to insult the snail. This movie limps along for what seems like an eternity, all to introduce us to some un-scary zombie kids with silly makeup and some sort of vendetta, or thirst for blood, or whatever. Believe me, you won't care. The thought alone that Mom would move her two daughters into this dilapidated and FILTHY home is absurd. And worse, I found myself simply not caring. Backstory about the zombie kids? Snore. Endangerment of Mom and/or daughters? Don't care.<br /><br />In short, WOW was this dull. Don't bother.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sentiment\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"negative\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":43}],"source":["movie_reviews.sample()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":523,"status":"ok","timestamp":1714366632945,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"yF5UMikwfhau","outputId":"779ad50a-2ac5-4830-b87e-b2213d3eab64"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["review       0\n","sentiment    0\n","dtype: int64"]},"metadata":{},"execution_count":44}],"source":["movie_reviews.isnull().sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":543,"status":"ok","timestamp":1714366635202,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"x9kqWayUSMAG","outputId":"7143210a-a09a-4a49-b0ec-d6d6b1dc87f1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["sentiment\n","negative    25000\n","positive    25000\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":45}],"source":["movie_reviews.value_counts('sentiment')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":467},"executionInfo":{"elapsed":519,"status":"ok","timestamp":1714366637603,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"OdIVQ4lLg0xa","outputId":"42ca0491-b12b-4c82-8ab9-b072863e253c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='sentiment', ylabel='count'>"]},"metadata":{},"execution_count":46},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import seaborn as sns\n","sns.countplot(x='sentiment', data=movie_reviews)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":109},"executionInfo":{"elapsed":804,"status":"ok","timestamp":1714366640669,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"TNZq-f9rg4Je","outputId":"56e0c730-75df-44f2-c9d5-59c86c2d3342"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'I thought this was a wonderful way to spend time on a too hot summer weekend, sitting in the air conditioned theater and watching a light-hearted comedy. The plot is simplistic, but the dialogue is witty and the characters are likable (even the well bread suspected serial killer). While some may be disappointed when they realize this is not Match Point 2: Risk Addiction, I thought it was proof that Woody Allen is still fully in control of the style many of us have grown to love.<br /><br />This was the most I\\'d laughed at one of Woody\\'s comedies in years (dare I say a decade?). While I\\'ve never been impressed with Scarlet Johanson, in this she managed to tone down her \"sexy\" image and jumped right into a average, but spirited young woman.<br /><br />This may not be the crown jewel of his career, but it was wittier than \"Devil Wears Prada\" and more interesting than \"Superman\" a great comedy to go see with friends.'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":47}],"source":["movie_reviews[\"review\"][2]"]},{"cell_type":"markdown","metadata":{"id":"QTdLnspfHg-O"},"source":["# Data Pre-processing"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"CFBT-oa9g8FE","executionInfo":{"status":"ok","timestamp":1714798253941,"user_tz":-330,"elapsed":5,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"}}},"outputs":[],"source":["rem_tag = re.compile(r'<[^>]+>')\n","\n","def remove_tags(text):\n","    '''Removes HTML tags: replaces anything between opening and closing <> with empty space'''\n","\n","    return rem_tag.sub('', text)"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":766,"status":"ok","timestamp":1714798257139,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"ffylGSjVg_dJ","outputId":"d16b405c-299a-46ed-8315-089e277e1b6c"},"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":14}],"source":["import nltk\n","nltk.download('stopwords')"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1714798259063,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"_7q_OBjqhB6l","outputId":"850661d8-beb0-4979-e120-9e88953a6607"},"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n"]}],"source":["import nltk\n","nltk.download('stopwords')\n","def preprocess_text(sen):\n","    '''Cleans text data up, leaving only 2 or more char long non-stepwords composed of A-Z & a-z only\n","    in lowercase'''\n","\n","    sentence = sen.lower()\n","\n","    sentence = remove_tags(sentence)\n","\n","    sentence = re.sub('[^a-zA-Z]', ' ', sentence)\n","\n","    sentence = re.sub(r\"\\s+[a-zA-Z]\\s+\", ' ', sentence)\n","\n","    sentence = re.sub(r'\\s+', ' ', sentence)\n","\n","    pattern = re.compile(r'\\b(' + r'|'.join(stopwords.words('english')) + r')\\b\\s*')\n","    sentence = pattern.sub('', sentence)\n","\n","    return sentence"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"zpijPyo8hFC8","executionInfo":{"status":"ok","timestamp":1714798298659,"user_tz":-330,"elapsed":34363,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"}}},"outputs":[],"source":["X = []\n","sentences = list(movie_reviews['review'])\n","for sen in sentences:\n","    X.append(preprocess_text(sen))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":72},"executionInfo":{"elapsed":508,"status":"ok","timestamp":1714366699908,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"Ju8PNU9ghIM-","outputId":"bbf4f4fb-df1a-4993-f02d-e5d43203cf55"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'thought wonderful way spend time hot summer weekend sitting air conditioned theater watching light hearted comedy plot simplistic dialogue witty characters likable even well bread suspected serial killer may disappointed realize match point risk addiction thought proof woody allen still fully control style many us grown love laughed one woody comedies years dare say decade never impressed scarlet johanson managed tone sexy image jumped right average spirited young woman may crown jewel career wittier devil wears prada interesting superman great comedy go see friends '"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":52}],"source":["X[2]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Jfn1-h-ahT3h"},"outputs":[],"source":["y = movie_reviews['sentiment']\n","y = np.array(list(map(lambda x: 1 if x==\"positive\" else 0, y)))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BuqGbW-chYM3"},"outputs":[],"source":["X_train_arr, X_test_arr, y_train_arr, y_test_arr = train_test_split(X, y, test_size=0.20, random_state=42)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"e5UOEgG8hees"},"outputs":[],"source":["X_train = np.array(X_train_arr)\n","X_test = np.array(X_test_arr)\n","y_train = np.array(y_train_arr)\n","y_test = np.array(y_test_arr)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1714366713803,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"JlAgxMGzhg1X","outputId":"4b6087b7-b262-415b-9db1-070d7e67d00d"},"outputs":[{"output_type":"stream","name":"stdout","text":["(40000,) (10000,) (40000,) (10000,)\n"]}],"source":["# shape of our training and testing data\n","\n","print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NrmqZsYKhkJi"},"outputs":[],"source":["word_token = Tokenizer()\n","word_token.fit_on_texts(X_train)\n","\n","X_train = word_token.texts_to_sequences(X_train)\n","X_test = word_token.texts_to_sequences(X_test)"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"z4RSnNoXw7_U","executionInfo":{"status":"ok","timestamp":1714798386256,"user_tz":-330,"elapsed":4,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"}}},"outputs":[],"source":["import io\n","import json"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hx5Lr7rYxLrL"},"outputs":[],"source":["tokenizer_json = word_token.to_json()\n","with io.open('b3_tokenizer.json', 'w', encoding='utf-8') as f:\n","    f.write(json.dumps(tokenizer_json, ensure_ascii=False))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":676,"status":"ok","timestamp":1714366739142,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"ITb1ukVOhoxW","outputId":"d573bfcf-293d-4550-c756-8e5bb6bfc72c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["92394"]},"metadata":{},"execution_count":60}],"source":["vocab_length = len(word_token.word_index) + 1\n","vocab_length"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cFSQ5vWehvAB"},"outputs":[],"source":["maxlen = 100\n","\n","X_train = pad_sequences(X_train, padding='post', maxlen=maxlen)\n","X_test = pad_sequences(X_test, padding='post', maxlen=maxlen)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GtSdZaJjhxWm"},"outputs":[],"source":["from numpy import asarray\n","from numpy import zeros\n","\n","embeddings_dictionary = dict()\n","glove_file = open('/content/drive/MyDrive/Final Year Project/GloVe word embeddings.txt', encoding=\"utf8\")\n","\n","for line in glove_file:\n","    records = line.split()\n","    word = records[0]\n","    vector_dimensions = asarray(records[1:], dtype='float32')\n","    embeddings_dictionary [word] = vector_dimensions\n","glove_file.close()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ea8V63Huh0Ml"},"outputs":[],"source":["embedding_matrix = zeros((vocab_length, 100))\n","for word, index in word_token.word_index.items():\n","    embedding_vector = embeddings_dictionary.get(word)\n","    if embedding_vector is not None:\n","        embedding_matrix[index] = embedding_vector"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":574,"status":"ok","timestamp":1714366789317,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"51sIs_UllqYm","outputId":"ee7193b1-c13b-4cd5-f8f8-fb420fcfe634"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(92394, 100)"]},"metadata":{},"execution_count":64}],"source":["embedding_matrix.shape"]},{"cell_type":"markdown","metadata":{"id":"WHUazVtLJkxW"},"source":["# Model Building (LSTM)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ispNVyRqlurp"},"outputs":[],"source":["from keras.layers import LSTM"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kEASz6Xzl2Xm"},"outputs":[],"source":["lstm_model = Sequential()\n","embedding_layer = Embedding(vocab_length, 100, weights=[embedding_matrix], input_length=maxlen , trainable=False)\n","\n","lstm_model.add(embedding_layer)\n","lstm_model.add(LSTM(128))\n","\n","lstm_model.add(Dense(1, activation='sigmoid'))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":772,"status":"ok","timestamp":1708580942208,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"f6rhkrfEtBNn","outputId":"58859583-aec9-45f9-eb46-f247c034e4bf"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding (Embedding)       (None, 100, 100)          9239400   \n","                                                                 \n"," lstm (LSTM)                 (None, 128)               117248    \n","                                                                 \n"," dense (Dense)               (None, 1)                 129       \n","                                                                 \n","=================================================================\n","Total params: 9356777 (35.69 MB)\n","Trainable params: 117377 (458.50 KB)\n","Non-trainable params: 9239400 (35.25 MB)\n","_________________________________________________________________\n","None\n"]}],"source":["lstm_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc'])\n","print(lstm_model.summary())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":684405,"status":"ok","timestamp":1708581634825,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"tQPZirWO8n17","outputId":"c1db51e2-9b48-4aca-9186-3ee7f4dc0b51"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/8\n","250/250 [==============================] - 85s 332ms/step - loss: 0.5067 - acc: 0.7535 - val_loss: 0.4221 - val_acc: 0.8148\n","Epoch 2/8\n","250/250 [==============================] - 81s 326ms/step - loss: 0.4140 - acc: 0.8142 - val_loss: 0.3886 - val_acc: 0.8249\n","Epoch 3/8\n","250/250 [==============================] - 79s 317ms/step - loss: 0.3803 - acc: 0.8345 - val_loss: 0.3493 - val_acc: 0.8495\n","Epoch 4/8\n","250/250 [==============================] - 80s 318ms/step - loss: 0.3436 - acc: 0.8516 - val_loss: 0.3543 - val_acc: 0.8476\n","Epoch 5/8\n","250/250 [==============================] - 84s 335ms/step - loss: 0.3260 - acc: 0.8609 - val_loss: 0.3194 - val_acc: 0.8606\n","Epoch 6/8\n","250/250 [==============================] - 83s 331ms/step - loss: 0.3100 - acc: 0.8717 - val_loss: 0.3249 - val_acc: 0.8650\n","Epoch 7/8\n","250/250 [==============================] - 80s 319ms/step - loss: 0.2883 - acc: 0.8836 - val_loss: 0.3249 - val_acc: 0.8648\n","Epoch 8/8\n","250/250 [==============================] - 82s 327ms/step - loss: 0.2699 - acc: 0.8914 - val_loss: 0.3126 - val_acc: 0.8669\n"]}],"source":["lstm_model_history = lstm_model.fit(X_train, y_train, batch_size=128, epochs=8, verbose=1, validation_split=0.2)"]},{"cell_type":"markdown","metadata":{"id":"J4LnePImJ327"},"source":["# Model Evaluation & Viz (LSTM)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":21041,"status":"ok","timestamp":1708581674283,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"RB0_3CRv8rOR","outputId":"23e7cef7-0896-49b6-9535-18527fd5a041"},"outputs":[{"name":"stdout","output_type":"stream","text":["313/313 [==============================] - 20s 62ms/step - loss: 0.3087 - acc: 0.8669\n"]}],"source":["score = lstm_model.evaluate(X_test, y_test, verbose=1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":453,"status":"ok","timestamp":1708581718443,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"5-m4OI0rDrrz","outputId":"b4fdd485-610a-4281-cda1-72fb1596734d"},"outputs":[{"name":"stdout","output_type":"stream","text":["Test Score: 0.3087292015552521\n","Test Accuracy: 0.8669000267982483\n"]}],"source":["print(\"Test Score:\", score[0])\n","print(\"Test Accuracy:\", score[1])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":927},"executionInfo":{"elapsed":1865,"status":"ok","timestamp":1708581747007,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"bb7T4kiAGeZL","outputId":"8f025b5a-b103-4513-9ec5-ddfc4907104c"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["import matplotlib.pyplot as plt\n","\n","plt.plot(lstm_model_history.history['acc'])\n","plt.plot(lstm_model_history.history['val_acc'])\n","\n","plt.title('model accuracy')\n","plt.ylabel('accuracy')\n","plt.xlabel('epoch')\n","plt.legend(['train','test'], loc='upper left')\n","plt.show()\n","\n","plt.plot(lstm_model_history.history['loss'])\n","plt.plot(lstm_model_history.history['val_loss'])\n","\n","plt.title('model loss')\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train','test'], loc='upper left')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RtE-sn0fJBZN"},"outputs":[],"source":["y_pred = lstm_model.predict(X_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uVQGI_OkJMB5"},"outputs":[],"source":["from sklearn.metrics import classification_report\n","print(classification_report(y_test, y_pred))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WsuXYS3oaG4M"},"outputs":[],"source":["lstm_model.save(f\"./drive/MyDrive/Final Year Project/lstm_model_{round(score[1], 3)}.h5\", save_format='h5')"]},{"cell_type":"code","execution_count":26,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8833,"status":"ok","timestamp":1714798483366,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"TOwfBw1SbLNB","outputId":"8e4f1b3a-044b-481a-ff8c-c7b9bdbc6a7a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding (Embedding)       (None, 100, 100)          9239400   \n","                                                                 \n"," lstm (LSTM)                 (None, 128)               117248    \n","                                                                 \n"," dense (Dense)               (None, 1)                 129       \n","                                                                 \n","=================================================================\n","Total params: 9356777 (35.69 MB)\n","Trainable params: 117377 (458.50 KB)\n","Non-trainable params: 9239400 (35.25 MB)\n","_________________________________________________________________\n"]}],"source":["from keras.models import load_model\n","\n","model_path ='/content/drive/MyDrive/Final Year Project/lstm_model_0.867.h5'\n","pretrained_lstm_model = load_model(model_path)\n","\n","# summarize model.\n","pretrained_lstm_model.summary()"]},{"cell_type":"markdown","metadata":{"id":"MgnA6saaKOgJ"},"source":["# Model Building (BiLSTM)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LWCyimaZKTy4"},"outputs":[],"source":["from keras.layers import Bidirectional"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"32CKDroYKul3"},"outputs":[],"source":["bilstm_model = Sequential()\n","embedding_layer = Embedding(vocab_length, 100, weights=[embedding_matrix], input_length=maxlen , trainable=False)\n","\n","bilstm_model.add(embedding_layer)\n","bilstm_model.add(Bidirectional(LSTM(128)))\n","\n","bilstm_model.add(Dense(1, activation='sigmoid'))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":541,"status":"ok","timestamp":1714366821901,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"ohWaRbnnKuow","outputId":"a7d7b313-8aa3-44c6-f0c3-237b05b0c999"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_1 (Embedding)     (None, 100, 100)          9239400   \n","                                                                 \n"," bidirectional_1 (Bidirecti  (None, 256)               234496    \n"," onal)                                                           \n","                                                                 \n"," dense_1 (Dense)             (None, 1)                 257       \n","                                                                 \n","=================================================================\n","Total params: 9474153 (36.14 MB)\n","Trainable params: 234753 (917.00 KB)\n","Non-trainable params: 9239400 (35.25 MB)\n","_________________________________________________________________\n","None\n"]}],"source":["bilstm_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc'])\n","print(bilstm_model.summary())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jvumgg8VKurO","outputId":"4f3a86c9-2362-4661-9d26-439671c10973","executionInfo":{"status":"ok","timestamp":1714368301258,"user_tz":-330,"elapsed":1476008,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/9\n","250/250 [==============================] - 153s 598ms/step - loss: 0.4854 - acc: 0.7641 - val_loss: 0.4336 - val_acc: 0.8045\n","Epoch 2/9\n","250/250 [==============================] - 148s 593ms/step - loss: 0.3981 - acc: 0.8227 - val_loss: 0.3631 - val_acc: 0.8436\n","Epoch 3/9\n","250/250 [==============================] - 148s 591ms/step - loss: 0.3610 - acc: 0.8419 - val_loss: 0.3456 - val_acc: 0.8487\n","Epoch 4/9\n","250/250 [==============================] - 216s 864ms/step - loss: 0.3246 - acc: 0.8603 - val_loss: 0.3425 - val_acc: 0.8472\n","Epoch 5/9\n","250/250 [==============================] - 210s 839ms/step - loss: 0.3007 - acc: 0.8733 - val_loss: 0.3177 - val_acc: 0.8637\n","Epoch 6/9\n","250/250 [==============================] - 158s 632ms/step - loss: 0.2806 - acc: 0.8848 - val_loss: 0.3530 - val_acc: 0.8411\n","Epoch 7/9\n","250/250 [==============================] - 150s 599ms/step - loss: 0.2581 - acc: 0.8935 - val_loss: 0.3176 - val_acc: 0.8664\n","Epoch 8/9\n","250/250 [==============================] - 147s 590ms/step - loss: 0.2285 - acc: 0.9088 - val_loss: 0.3321 - val_acc: 0.8601\n","Epoch 9/9\n","250/250 [==============================] - 146s 587ms/step - loss: 0.1967 - acc: 0.9212 - val_loss: 0.3655 - val_acc: 0.8577\n"]}],"source":["bilstm_model_history = bilstm_model.fit(X_train, y_train, batch_size=128, epochs=9, verbose=1, validation_split=0.2)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1kW8vL-RKutk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1714368469863,"user_tz":-330,"elapsed":30123,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"}},"outputId":"396d6532-2ebd-43da-b77c-6ba91215386b"},"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 30s 95ms/step - loss: 0.3637 - acc: 0.8625\n"]}],"source":["bi_score = bilstm_model.evaluate(X_test, y_test, verbose=1)"]},{"cell_type":"markdown","source":["# Model Evaluation & Viz (BiLSTM)"],"metadata":{"id":"0TnOhnbCVfm7"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"GbHaKHrrKuxL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1714368476377,"user_tz":-330,"elapsed":454,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"}},"outputId":"843d00e1-5123-4ac6-ae34-165556e4af72"},"outputs":[{"output_type":"stream","name":"stdout","text":["Test Score: 0.3637377917766571\n","Test Accuracy: 0.862500011920929\n"]}],"source":["print(\"Test Score:\", bi_score[0])\n","print(\"Test Accuracy:\", bi_score[1])"]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","plt.plot(bilstm_model_history.history['acc'])\n","plt.plot(bilstm_model_history.history['val_acc'])\n","\n","plt.title('model accuracy')\n","plt.ylabel('accuracy')\n","plt.xlabel('epoch')\n","plt.legend(['train','test'], loc='upper left')\n","plt.show()\n","\n","plt.plot(bilstm_model_history.history['loss'])\n","plt.plot(bilstm_model_history.history['val_loss'])\n","\n","plt.title('model loss')\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train','test'], loc='upper left')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":927},"id":"s60arOZvQuQe","executionInfo":{"status":"ok","timestamp":1714368484169,"user_tz":-330,"elapsed":1877,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"}},"outputId":"017934d3-8394-42ce-85a8-113e2c1e5a40"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAkAAAAHHCAYAAABXx+fLAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAB4WUlEQVR4nO3dd1yVdf/H8ddhgyIOhoIIrtwrBzmzNE3Lysq0LFHTlppmdae52lR3+aPUtO7Upmk5yrIso9Tcprn3xFQQHCAg65zr98elFImmCFwHeD8fj/PonIvrXOdzYXXefqfNMAwDERERkVLExeoCRERERIqaApCIiIiUOgpAIiIiUuooAImIiEipowAkIiIipY4CkIiIiJQ6CkAiIiJS6igAiYiISKmjACQiIiKljgKQiBSpQ4cOYbPZ+Oijj676vUuXLsVms7F06dICr0tEShcFIBERESl1FIBERESk1FEAEhGxWGpqqtUliJQ6CkAipcwLL7yAzWZjz549PPjgg/j5+REQEMC4ceMwDIMjR45w5513Uq5cOSpXrszbb7990TVOnDjBww8/TFBQEF5eXjRp0oSPP/74ovPOnDlD//798fPzo3z58kRGRnLmzJk869q1axf33nsvFStWxMvLixYtWrBw4cJ83ePhw4d54oknqFOnDt7e3lSqVIlevXpx6NChPGt86qmnCA8Px9PTk6pVq9KvXz8SExNzzklPT+eFF17guuuuw8vLiypVqnD33Xezf/9+4NJjk/Ia79S/f3/Kli3L/v376d69O76+vvTt2xeA3377jV69elGtWjU8PT0JDQ3lqaee4ty5c3n+vu677z4CAgLw9vamTp06jBkzBoBff/0Vm83GggULLnrfrFmzsNlsrF69+mp/rSIlipvVBYiINXr37k29evV4/fXXWbRoEa+88goVK1bk/fff5+abb+aNN97g888/55lnnqFly5Z06NABgHPnztGxY0f27dvH0KFDqV69Ol999RX9+/fnzJkzDB8+HADDMLjzzjtZsWIFjz32GPXq1WPBggVERkZeVMv27dtp27YtISEhjBo1ijJlyvDll19y1113MW/ePHr27HlV97Z+/XpWrVpFnz59qFq1KocOHWLq1Kl07NiRHTt24OPjA0BKSgrt27dn586dDBw4kOuvv57ExEQWLlzIn3/+ib+/P3a7ndtvv52Y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REREirHk9Cw+XxPL9BUHSUzJAMw1fAa0Cadf65K5hk9BKPnz3AQwW2uWLVvGO++8g81mw2azcejQIbZt20a3bt0oW7YsQUFBPPTQQyQmJua8b+7cuTRq1Ahvb28qVapE586dSU1N5YUXXuDjjz/mm2++ybne0qVLrbtBEZFSJuFsBm8u3kXbqF94Y/EuElMyCCnvzQs96rPyuZsZ1qm2ws9lqAWoIBgGZKUV/ee6+8AVjtx/55132LNnDw0bNuSll14y3+7uTqtWrRg0aBD/93//x7lz53juuee47777+OWXXzh+/Dj3338/b775Jj179uTs2bP89ttvGIbBM888w86dO0lOTmbmzJkAVKxYsdBuVURETEdOpfHB8gN8+fsRMv62hs9jN9bkjqalYw2fgqAAVBCy0uC14KL/3OePgceVDWbz8/PDw8MDHx8fKleuDMArr7xCs2bNeO2113LOmzFjBqGhoezZs4eUlBSys7O5++67CQsLA6BRo0Y553p7e5ORkZFzPRERKTy74pKZtnQ/3245jv38Ij5NQ8vzRMeadK4XVKrW8CkICkCl2ObNm/n1118pW7bsRT/bv38/Xbp0oVOnTjRq1IiuXbvSpUsX7r33XipUqGBBtSIipdPv59fwifnbGj7ta/vzRMda3FCjdK7hUxAUgAqCu4/ZGmPF516DlJQUevTowRtvvHHRz6pUqYKrqytLlixh1apV/PTTT0yaNIkxY8awdu1aqlevfk2fLSIil2YYBkt3JzB16X7WHToFmCMeujeswuMdtYZPQVAAKgg22xV3RVnJw8MDu92e8/r6669n3rx5hIeH4+aW978KNpuNtm3b0rZtW8aPH09YWBgLFixg5MiRF11PRESujWEY/LQjnuif97LzeDIA7q427rm+Ko/eqDV8CpICUCkSHh7O2rVrOXToEGXLlmXIkCH873//4/777+c///kPFStWZN++fcyePZsPP/yQ33//nZiYGLp06UJgYCBr164lISGBevXq5Vzvxx9/ZPfu3VSqVAk/Pz/c3TXjQEQkP3bFJfPStztYtf8kAD4ervSNqMbD7WpQ2U9r+BQ0BaBS5JlnniEyMpL69etz7tw5Dh48yMqVK3nuuefo0qULGRkZhIWFceutt+Li4kK5cuVYvnw50dHRJCcnExYWxttvv023bt0AGDx4MEuXLqVFixak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7HY7QUFBuY4HBQWxa9cui6qS/HI4HIwYMYK2bdvSsGFDq8spMFu3bqV169akp6dTtmxZFixYQP369a0uq8DMnj2bjRs3sn79eqtLKRQRERF89NFH1KlTh+PHj/Piiy/Svn17tm3bhq+vr9XlXbMDBw4wdepURo4cyfPPP8/69et58skn8fDwIDIy0uryCtzXX3/NmTNn6N+/v9WlFJhRo0aRnJxM3bp1cXV1xW638+qrr9K3b19L6lEAErlKQ4YMYdu2bSVqfAVAnTp12LRpE0lJScydO5fIyEiWLVtWIkLQkSNHGD58OEuWLMHLy8vqcgrF3/8W3bhxYyIiIggLC+PLL7/k4YcftrCyguFwOGjRogWvvfYaAM2aNWPbtm1MmzatRAag6dOn061bN4KDg60upcB8+eWXfP7558yaNYsGDRqwadMmRowYQXBwsCV/hgpARcDf3x9XV1fi4+NzHY+Pj6dy5coWVSX5MXToUL777juWL19O1apVrS6nQHl4eFCrVi0Amjdvzvr163nnnXd4//33La7s2m3YsIETJ05w/fXX5xyz2+0sX76cyZMnk5GRgaurq4UVFrzy5ctz3XXXsW/fPqtLKRBVqlS5KIzXq1ePefPmWVRR4Tl8+DA///wz8+fPt7qUAvXss88yatQo+vTpA0CjRo04fPgwUVFRlgQgjQEqAh4eHjRv3pyYmJicYw6Hg5iYmBI3xqKkMgyDoUOHsmDBAn755ReqV69udUmFzuFwkJGRYXUZBaJTp05s3bqVTZs25TxatGhB37592bRpU4kLPwApKSns37+fKlWqWF1KgWjbtu1FS0/s2bOHsLAwiyoqPDNnziQwMJDbbrvN6lIKVFpaGi4uuWOHq6srDofDknrUAlRERo4cSWRkJC1atKBVq1ZER0eTmprKgAEDrC6tQKSkpOT6m+bBgwfZtGkTFStWpFq1ahZWVjCGDBnCrFmz+Oabb/D19SUuLg4APz8/vL29La7u2o0ePZpu3bpRrVo1zp49y6xZs1i6dCk//vij1aUVCF9f34vGa5UpU4ZKlSqVmHFczzzzDD169CAsLIxjx44xYcIEXF1duf/++60urUA89dRTtGnThtdee4377ruPdevW8cEHH/DBBx9YXVqBcjgczJw5k8jISNzcStZXdI8ePXj11VepVq0aDRo04I8//mDixIkMHDjQmoIsmXtWSk2aNMmoVq2a4eHhYbRq1cpYs2aN1SUVmF9//dUALnpERkZaXVqByOveAGPmzJlWl1YgBg4caISFhRkeHh5GQECA0alTJ+Onn36yuqxCVdKmwffu3duoUqWK4eHhYYSEhBi9e/c29u3bZ3VZBerbb781GjZsaHh6ehp169Y1PvjgA6tLKnA//vijARi7d++2upQCl5ycbAwfPtyoVq2a4eXlZdSoUcMYM2aMkZGRYUk9NsOwaAlGEREREYtoDJCIiIiUOgpAIiIiUuooAImIiEipowAkIiIipY4CkIiIiJQ6CkAiIiJS6igAiYiISKmjACQicgWWLl2KzWbjzJkzVpciIgVAAUhERERKHQUgERERKXUUgESkWHA4HERFRVG9enW8vb1p0qQJc+fOBf7qnlq0aBGNGzfGy8uLG264gW3btuW6xrx582jQoAGenp6Eh4fz9ttv5/p5RkYGzz33HKGhoXh6elKrVi2mT5+e65wNGzbQokULfHx8aNOmzUU7lItI8aAAJCLFQlRUFJ988gnTpk1j+/btPPXUUzz44IMsW7Ys55xnn32Wt99+m/Xr1xMQEECPHj3IysoCzOBy33330adPH7Zu3coLL7zAuHHj+Oijj3Le369fP7744gveffdddu7cyfvvv0/ZsmVz1TFmzBjefvttfv/9d9zc3KzbyVpErok2QxURp5eRkUHFihX5+eefad26dc7xQYMGkZaWxiOPPMJNN93E7Nmz6d27NwCnTp2iatWqfPTRR9x333307duXhIQEfvrpp5z3/+c//2HRokVs376dPXv2UKdOHZYsWULnzp0vqmHp0qXcdNNN/Pzzz3Tq1AmA77//nttuu41z587h5eVVyL8FESlIagESEae3b98+0tLSuOWWWyhbtmzO45NPPmH//v055/09HFWsWJE6deqwc+dOAHbu3Enbtm1zXbdt27bs3bsXu93Opk2bcHV15cYbb7xsLY0bN855XqVKFQBOnDhxzfcoIkXLzeoCRET+TUpKCgCLFi0iJCQk1888PT1zhaD88vb2vqLz3N3dc57bbDbAHJ8kIsWLWoBExOnVr18fT09PYmNjqVWrVq5HaGhoznlr1qzJeX769Gn27NlDvXr1AKhXrx4rV67Mdd2VK1dy3XXX4erqSqNGjXA4HLnGFIlIyaUWIBFxer6+vjzzzDM89dRTOBwO2rVrR1JSEitXrqRcuXKEhYUB8NJLL1GpUiWCgoIYM2YM/v7+3HXXXQA8/fTTtGzZkpdffpnevXuzevVqJk+ezHvvvQdAeHg4kZGRDBw4kHfffZcmTZpw+PBhTpw4wX333WfVrYtIIVEAEpFi4eWXXyYgIICoqCgOHDhA+fLluf7663n++edzuqBef/11hg8fzt69e2natCnffvstHh4eAFx//fV8+eWXjB8/npdffpkqVarw0ksv0b9//5zPmDp1Ks8//zxPPPEEJ0+epFq1ajz//PNW3K6IFDLNAhORYu/CDK3Tp09Tvnx5q8sRkWJAY4BERESk1FEAEhERkVJHXWAiIiJS6qgFSEREREodBSAREREpdRSAREREpNRRABIREZFSRwFIRERESh0FIBERESl1FIBERESk1FEAEhERkVJHAUhERERKnf8H2IOODdVBlygAAAAASUVORK5CYII=\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["y_pred_bi = bilstm_model.predict(X_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"12ryCVwdQuTU","executionInfo":{"status":"ok","timestamp":1714368539780,"user_tz":-330,"elapsed":42700,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"}},"outputId":"426453e5-c05b-49b1-e5fa-7145dc26f3af"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 31s 96ms/step\n"]}]},{"cell_type":"code","source":["bilstm_model.save(f\"./drive/MyDrive/Final Year Project/bilstm_model_{round(bi_score[1], 3)}.h5\", save_format='h5')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hdfH4lygQuZD","executionInfo":{"status":"ok","timestamp":1714368579941,"user_tz":-330,"elapsed":1267,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"}},"outputId":"74754a9e-4dad-4b69-ef2a-9bf0eae86b24"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3079: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n","  saving_api.save_model(\n"]}]},{"cell_type":"code","source":["from keras.models import load_model\n","\n","model_path ='/content/drive/MyDrive/Final Year Project/bilstm_model_0.863.h5'\n","pretrained_bilstm_model = load_model(model_path)\n","\n","# summarize model.\n","pretrained_bilstm_model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KLYZRWNOR2Mx","executionInfo":{"status":"ok","timestamp":1714368644431,"user_tz":-330,"elapsed":2106,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"}},"outputId":"5f7bb5bd-ddcb-4f7a-dc74-abe1117a8b0a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_1 (Embedding)     (None, 100, 100)          9239400   \n","                                                                 \n"," bidirectional_1 (Bidirecti  (None, 256)               234496    \n"," onal)                                                           \n","                                                                 \n"," dense_1 (Dense)             (None, 1)                 257       \n","                                                                 \n","=================================================================\n","Total params: 9474153 (36.14 MB)\n","Trainable params: 234753 (917.00 KB)\n","Non-trainable params: 9239400 (35.25 MB)\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","metadata":{"id":"7Ww3YGVCKHqR"},"source":["# Prediction on Live Data"]},{"cell_type":"code","execution_count":41,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":869,"status":"ok","timestamp":1714798864160,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"OcB8vzXVcPuz","outputId":"57155697-03df-49d3-9952-bf21175592ae"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Unnamed: 0       Movie                                        Review Text  \\\n","0           0  Ex Machina  Intelligent Movie.\\nThis movie is obviously al...   \n","1           1  Ex Machina  Extraordinary and thought-provoking.\\n'Ex mach...   \n","2           2  Ex Machina  Poor story, only reasonable otherwise.\\nIf I h...   \n","3           3  Ex Machina  Had Great Potential.\\nThis movie is one of the...   \n","4           4    Eternals  Amazing visuals and philosophical concepts!\\n\\...   \n","\n","   IMDb Rating  \n","0            9  \n","1           10  \n","2            3  \n","3            1  \n","4           10  "],"text/html":["\n","  <div id=\"df-ae01d0bd-7efb-4b0e-b8c0-737e397683d7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>Movie</th>\n","      <th>Review Text</th>\n","      <th>IMDb Rating</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>Ex Machina</td>\n","      <td>Intelligent Movie.\\nThis movie is obviously al...</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>Ex Machina</td>\n","      <td>Extraordinary and thought-provoking.\\n'Ex mach...</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>Ex Machina</td>\n","      <td>Poor story, only reasonable otherwise.\\nIf I h...</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>Ex Machina</td>\n","      <td>Had Great Potential.\\nThis movie is one of the...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>Eternals</td>\n","      <td>Amazing visuals and philosophical concepts!\\n\\...</td>\n","      <td>10</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ae01d0bd-7efb-4b0e-b8c0-737e397683d7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ae01d0bd-7efb-4b0e-b8c0-737e397683d7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ae01d0bd-7efb-4b0e-b8c0-737e397683d7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c9323970-1b74-48d3-a035-7e77c53b141d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c9323970-1b74-48d3-a035-7e77c53b141d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c9323970-1b74-48d3-a035-7e77c53b141d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"new_reviews","summary":"{\n  \"name\": \"new_reviews\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 10,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          5,\n          0,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Movie\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Ex Machina\",\n          \"Eternals\",\n          \"Don't breathe\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Review Text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"Worst MCU film ever\\n\\nFollowing the events of Avengers: Endgame (2019), an unexpected tragedy forces the Eternals, ancient aliens who have been living on Earth in secret for thousands of years, out of the shadows to reunite against mankind's most ancient enemy, the Deviants.\\n\\nThis film is by far the worst MCU film I have watch. It's massive insuylt to the comics from the Jack Kirby days. Gender swapping some of the eternals, bad story telling which makes absolutely no sense, unlikeable characters, little to no action and ridicules changes to the MCU just sum up how bad this film. Completely ruined Endgame\\n\\nThe only goods were the music and the CGI for Arishen as well as bonus points for being voiced by David Kaye.\\n\\nOther then that it's just not a good movie makes both Captain Marvel and Iron Man 3 look good.\",\n          \"Intelligent Movie.\\nThis movie is obviously allegorical, a fascinating tale about AI, but it is mainly about manipulation and power. It isn't for those wanting action or spectacular CGI, the movie is aimed at people who like to think, rather than passively wait to be entertained. There are themes here not only about AI, but also about surveillance, with excellent points about how data about us is collected by phone companies, search engine companies, commercial operating systems makers and so on. The plot seems simple but isn't, it's extremely clever, with the protagonist playing games, trying to stay one step ahead of one another. This is a movie with perfectly consistent internal logic that plays out perfectly. Don't go in expecting too much, however, as I can see most people will not be satisfied by this movie, but for me, it does what it sets out to do brilliantly. Therefore I give at least 9/10. And most recent movies have been getting 5/10 from me. This movie succeeds where another recent movie about AI, Transcendence, I think it is called, failed (but it was an interesting failure). A third movie about AI, a Spanish movie called Eva, was also brilliant. Eva was more moving and this movie more philosophical. But both movies were perfect in their different ways. The AI's name in this movie, Ava, seems to be a nod to the title of the Spanish movie. As an aside, it's nice that no \\\"stars\\\" appeared in \\\"Ex Machina\\\" and \\\"Eva\\\", the casting was great. Of course there are several aspects of this movie that are unrealistic and often absurd. But because this is an allegorical movie, these are acceptable, because the movie is making points, rather than striving for realism. It's more of a fairytale than accurate portrayal.\",\n          \"Excellent suspense and thriler movie. Every bit of it horrific and worth watching it.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IMDb Rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 10,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          9,\n          10,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":41}],"source":["new_reviews = pd.read_csv(\"/content/drive/MyDrive/Final Year Project/Unseen data.csv\")\n","new_reviews.head(5)"]},{"cell_type":"code","execution_count":42,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":480,"status":"ok","timestamp":1714798875216,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"q20d5jGXcd2L","outputId":"51ffa824-2760-4b37-8f8d-ca1dff655870"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(11, 4)"]},"metadata":{},"execution_count":42}],"source":["new_reviews.shape"]},{"cell_type":"code","execution_count":43,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2351,"status":"ok","timestamp":1714798886146,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"0af47n47csXV","outputId":"6e247c2f-8088-4aa1-8217-50601f72cf1c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Unnamed: 0     0\n","Movie          0\n","Review Text    0\n","IMDb Rating    0\n","dtype: int64"]},"metadata":{},"execution_count":43}],"source":["new_reviews.isnull().sum()"]},{"cell_type":"code","execution_count":44,"metadata":{"id":"-v_TQXKLc5L1","executionInfo":{"status":"ok","timestamp":1714798890530,"user_tz":-330,"elapsed":18,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"}}},"outputs":[],"source":["unseen_reviews = new_reviews['Review Text']\n","\n","unseen_processed = []\n","for review in unseen_reviews:\n","  review = preprocess_text(review)\n","  unseen_processed.append(review)"]},{"cell_type":"code","execution_count":45,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":26,"status":"ok","timestamp":1714798903995,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"hcC2bTNTdJwb","outputId":"71dd2fbb-0dea-490b-eff2-d13cb50195f2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["['intelligent movie movie obviously allegorical fascinating tale ai mainly manipulation power wanting action spectacular cgi movie aimed people like think rather passively wait entertained themes ai also surveillance excellent points data us collected phone companies search engine companies commercial operating systems makers plot seems simple extremely clever protagonist playing games trying stay one step ahead one another movie perfectly consistent internal logic plays perfectly go expecting much however see people satisfied movie sets brilliantly therefore give least recent movies getting movie succeeds another recent movie ai transcendence think called failed interesting failure third movie ai spanish movie called eva also brilliant eva moving movie philosophical movies perfect different ways ai name movie ava seems nod title spanish movie aside nice stars appeared ex machina eva casting great course several aspects movie unrealistic often absurd allegorical movie acceptable movie making points rather striving realism fairytale accurate portrayal ',\n"," 'extraordinary thought provoking ex machina surprisingly dense titles alex garland written perhaps excepting annihilation simple concept given definite narrative narrative pointedly explores nature thought perception broaching nature ramifications morality psychological thriller fundamental construction minute rendering alike intense feature genre name offhand much almost classify horror movie emphasizes plays dire uncertainty intent motivation reality way climax even leaves us somewhat ambiguous ending ordinary beginning captivating ending every point ex machina absolutely marvelous performance seen oscar isaac none nearly forceful portrayal nathan exhibiting outstanding nuance sharp personality realization man exceptionally intelligent exceptionally cruel conniving especially familiar domhnall gleeson irish actor demonstrates admirable range poise readily matching traits immediately notable costars said certainly count anyone else involved alicia vikander phenomenal ava showing careful exactness every motion expression befitting character impressing skills subtle ways love score composed ben salisbury geoff barrow lending pensive unease film building great crescendo precise appropriate moments sound design exquisite soft unobtrusive qualities denoting meticulous craft feature highly advanced status ava special effects read little bit production history informs substantial effort made ensure every element nathan creation visualized utmost possibility realism think endeavor paid handsomely characters written wonderfully complex dialogue deceptively garland scene writing impeccable deeply engrossing say nothing overall narrative delves heavy subject matter even aware acclaim feature garnered since release wholly sure expect sat watch got far exceeded anything imagined mostly stepping away significantly common story ideas populate sci fi films artificial intelligence garland screenplay analyzes consciousness depth completeness potency anticipated genre picture result terrifically engaging exhilarating factor sound performances excellent music ex machina firmly first rate slice science fiction call must see ',\n"," 'poor story reasonable otherwise realised alex garland would bothered watching remember reading book beach years ago thinking something nice time sure seen ex machina feeling story chosen simply appeal large audience rather manipulative unthinking unfeeling way normally write bad reviews anything preferring focus positive dislike felt write something put people wasting time assimilating nastiness case ex machina imagine garland wondering would next project googling ai quickly finding ai box experiment rather heart soul searching work would necessary produce anything original imagine quickly turning somebody else idea next big proposal present film studio unoriginal idea presented fairly pedestrian way lots images derived young person view sexuality made also wonder film rather prejudiced women reasonably paced found yawning lot quite would expect good thriller domhnall gleeson ok pretty good job ',\n"," 'great potential movie one countless come hollywood great potential however like many personalities hollywood sold soul cheap finish beautiful ideas movie could great however producers chose go cheap thriller effect instead exploring truly makes us human machine conceived written produced idiots soul waste time redeeming part movie dweeb gets sent sticks surprised smartphone tell signal producers writers piece crap obviously signal also ',\n"," 'amazing visuals philosophical concepts eternals visual masterpiece inner challenges eternals face great signifier mcu moving mature meaningful phase look deeper plot events significance appreciate detail put timeline spans thousands years low underwhelming ratings seem obviously place despite fact many people loved mcu couple buff guys sexualised women transition mcu going inevitable franchise supported generations quite frankly awesome besides stunning visuals deep undertones chloe zhao certainly packs enough fight scenes possibly needed eternal represents unique power connected source cosmic energy variability allows exhilarating fight scenes arguably interesting couple punches kicks stray flying weapon love stories quaint meaningful certainly take much run time overall new age maturity deeper concepts seen movie definitely something look forward phase ',\n"," 'worst mcu film ever following events avengers endgame unexpected tragedy forces eternals ancient aliens living earth secret thousands years shadows reunite mankind ancient enemy deviants film far worst mcu film watch massive insuylt comics jack kirby days gender swapping eternals bad story telling makes absolutely sense unlikeable characters little action ridicules changes mcu sum bad film completely ruined endgame goods music cgi arishen well bonus points voiced david kaye good movie makes captain marvel iron man look good ',\n"," 'best movie ever top notch acting dwyane johnson kevin hart great graphics',\n"," 'great horror movie one time watch nice acting skills kids amazing story',\n"," 'consider moviee found thrilling yet slow',\n"," 'excellent suspense thriler movie every bit horrific worth watching ',\n"," 'boring movie horror scenes story movie bad plot movie ']"]},"metadata":{},"execution_count":45}],"source":["unseen_processed"]},{"cell_type":"code","execution_count":46,"metadata":{"id":"JsvSeAsudYIM","executionInfo":{"status":"ok","timestamp":1714798907417,"user_tz":-330,"elapsed":3,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"}}},"outputs":[],"source":["from keras_preprocessing.text import tokenizer_from_json"]},{"cell_type":"code","execution_count":47,"metadata":{"id":"5oRmPyT6dbvK","executionInfo":{"status":"ok","timestamp":1714798909827,"user_tz":-330,"elapsed":5,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"}}},"outputs":[],"source":["with open('/content/drive/MyDrive/Final Year Project/tokenizer.json') as f:\n","    data = json.load(f)\n","    loaded_tokenizer = tokenizer_from_json(data)"]},{"cell_type":"code","execution_count":48,"metadata":{"id":"43XtMnqhde9o","executionInfo":{"status":"ok","timestamp":1714798935945,"user_tz":-330,"elapsed":3763,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"}}},"outputs":[],"source":["unseen_tokenized = loaded_tokenizer.texts_to_sequences(unseen_processed)"]},{"cell_type":"code","execution_count":49,"metadata":{"id":"rYQ8ZJuVd3dR","executionInfo":{"status":"ok","timestamp":1714798943559,"user_tz":-330,"elapsed":21,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"}}},"outputs":[],"source":["unseen_padded = pad_sequences(unseen_tokenized, padding='post', maxlen=100)"]},{"cell_type":"code","execution_count":50,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":23,"status":"ok","timestamp":1714798948057,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"Y8o-x1Yfd8a7","outputId":"fac6a167-4720-4933-ae88-559ea460aaee"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[  879,  1740,   282, ..., 10209,  1615,   937],\n","       [  121,   234,   352, ...,   522,    96,    11],\n","       [  217,  1163,   871, ...,    81,     5,   181],\n","       ...,\n","       [ 1028, 69061,   142, ...,     0,     0,     0],\n","       [  199,   602, 57078, ...,     0,     0,     0],\n","       [  227,     1,    80, ...,     0,     0,     0]], dtype=int32)"]},"metadata":{},"execution_count":50}],"source":["unseen_padded"]},{"cell_type":"code","execution_count":51,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1714798951261,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"tlXOtbQgd_b_","outputId":"ce220a13-9d45-4981-8a0f-fe55c3a393f7"},"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 46ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["array([[0.9135946 ],\n","       [0.99421453],\n","       [0.09232325],\n","       [0.7148496 ],\n","       [0.97275174],\n","       [0.03257685],\n","       [0.9872628 ],\n","       [0.9910395 ],\n","       [0.93552935],\n","       [0.988444  ],\n","       [0.00660589]], dtype=float32)"]},"metadata":{},"execution_count":51}],"source":["unseen_sentiments = pretrained_lstm_model.predict(unseen_padded)\n","unseen_sentiments"]},{"cell_type":"code","execution_count":52,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":394},"executionInfo":{"elapsed":832,"status":"ok","timestamp":1714798956280,"user":{"displayName":"Krishna Desai","userId":"13656959037363305483"},"user_tz":-330},"id":"yOpVZOfaeDmy","outputId":"0dfe4f3a-f224-4b00-f28f-c490560f809c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                             Movie  \\\n","0                       Ex Machina   \n","1                       Ex Machina   \n","2                       Ex Machina   \n","3                       Ex Machina   \n","4                         Eternals   \n","5                         Eternals   \n","6   Jumanji: Welcome to the Jungle   \n","7                               IT   \n","8                   Fast n furious   \n","9                    Don't breathe   \n","10                      Last house   \n","\n","                                          Review Text  IMDb Rating  \\\n","0   Intelligent Movie.\\nThis movie is obviously al...            9   \n","1   Extraordinary and thought-provoking.\\n'Ex mach...           10   \n","2   Poor story, only reasonable otherwise.\\nIf I h...            3   \n","3   Had Great Potential.\\nThis movie is one of the...            1   \n","4   Amazing visuals and philosophical concepts!\\n\\...           10   \n","5   Worst MCU film ever\\n\\nFollowing the events of...            3   \n","6   Best movie ever. Top-notch acting of Dwyane Jo...            8   \n","7   Great horror movie but one time watch. Nice ac...            7   \n","8   i consider this moviee to found very thrilling...            9   \n","9   Excellent suspense and thriler movie. Every bi...            8   \n","10  Very boring movie. No horror scenes at all. Th...            2   \n","\n","    Predicted Rating Overall Sentiment  \n","0                9.1          Positive  \n","1                9.9          Positive  \n","2                0.9          Negative  \n","3                7.1          Positive  \n","4                9.7          Positive  \n","5                0.3          Negative  \n","6                9.9          Positive  \n","7                9.9          Positive  \n","8                9.4          Positive  \n","9                9.9          Positive  \n","10               0.1          Negative  "],"text/html":["\n","  <div id=\"df-fee6f9d8-45aa-4c29-ae13-916be62d4530\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Movie</th>\n","      <th>Review Text</th>\n","      <th>IMDb Rating</th>\n","      <th>Predicted Rating</th>\n","      <th>Overall Sentiment</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Ex Machina</td>\n","      <td>Intelligent Movie.\\nThis movie is obviously al...</td>\n","      <td>9</td>\n","      <td>9.1</td>\n","      <td>Positive</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Ex Machina</td>\n","      <td>Extraordinary and thought-provoking.\\n'Ex mach...</td>\n","      <td>10</td>\n","      <td>9.9</td>\n","      <td>Positive</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Ex Machina</td>\n","      <td>Poor story, only reasonable otherwise.\\nIf I h...</td>\n","      <td>3</td>\n","      <td>0.9</td>\n","      <td>Negative</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Ex Machina</td>\n","      <td>Had Great Potential.\\nThis movie is one of the...</td>\n","      <td>1</td>\n","      <td>7.1</td>\n","      <td>Positive</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Eternals</td>\n","      <td>Amazing visuals and philosophical concepts!\\n\\...</td>\n","      <td>10</td>\n","      <td>9.7</td>\n","      <td>Positive</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Eternals</td>\n","      <td>Worst MCU film ever\\n\\nFollowing the events of...</td>\n","      <td>3</td>\n","      <td>0.3</td>\n","      <td>Negative</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Jumanji: Welcome to the Jungle</td>\n","      <td>Best movie ever. Top-notch acting of Dwyane Jo...</td>\n","      <td>8</td>\n","      <td>9.9</td>\n","      <td>Positive</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>IT</td>\n","      <td>Great horror movie but one time watch. Nice ac...</td>\n","      <td>7</td>\n","      <td>9.9</td>\n","      <td>Positive</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>Fast n furious</td>\n","      <td>i consider this moviee to found very thrilling...</td>\n","      <td>9</td>\n","      <td>9.4</td>\n","      <td>Positive</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>Don't breathe</td>\n","      <td>Excellent suspense and thriler movie. Every bi...</td>\n","      <td>8</td>\n","      <td>9.9</td>\n","      <td>Positive</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>Last house</td>\n","      <td>Very boring movie. No horror scenes at all. Th...</td>\n","      <td>2</td>\n","      <td>0.1</td>\n","      <td>Negative</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fee6f9d8-45aa-4c29-ae13-916be62d4530')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-fee6f9d8-45aa-4c29-ae13-916be62d4530 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-fee6f9d8-45aa-4c29-ae13-916be62d4530');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1c73114d-e0b3-40cb-be2f-a2efd17164fb\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1c73114d-e0b3-40cb-be2f-a2efd17164fb')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1c73114d-e0b3-40cb-be2f-a2efd17164fb button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_fa3fc96e-7e7f-48c2-b4c4-670c9d43410e\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dfx')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_fa3fc96e-7e7f-48c2-b4c4-670c9d43410e button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('dfx');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"dfx","summary":"{\n  \"name\": \"dfx\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"Movie\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Ex Machina\",\n          \"Eternals\",\n          \"Don't breathe\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Review Text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"Worst MCU film ever\\n\\nFollowing the events of Avengers: Endgame (2019), an unexpected tragedy forces the Eternals, ancient aliens who have been living on Earth in secret for thousands of years, out of the shadows to reunite against mankind's most ancient enemy, the Deviants.\\n\\nThis film is by far the worst MCU film I have watch. It's massive insuylt to the comics from the Jack Kirby days. Gender swapping some of the eternals, bad story telling which makes absolutely no sense, unlikeable characters, little to no action and ridicules changes to the MCU just sum up how bad this film. Completely ruined Endgame\\n\\nThe only goods were the music and the CGI for Arishen as well as bonus points for being voiced by David Kaye.\\n\\nOther then that it's just not a good movie makes both Captain Marvel and Iron Man 3 look good.\",\n          \"Intelligent Movie.\\nThis movie is obviously allegorical, a fascinating tale about AI, but it is mainly about manipulation and power. It isn't for those wanting action or spectacular CGI, the movie is aimed at people who like to think, rather than passively wait to be entertained. There are themes here not only about AI, but also about surveillance, with excellent points about how data about us is collected by phone companies, search engine companies, commercial operating systems makers and so on. The plot seems simple but isn't, it's extremely clever, with the protagonist playing games, trying to stay one step ahead of one another. This is a movie with perfectly consistent internal logic that plays out perfectly. Don't go in expecting too much, however, as I can see most people will not be satisfied by this movie, but for me, it does what it sets out to do brilliantly. Therefore I give at least 9/10. And most recent movies have been getting 5/10 from me. This movie succeeds where another recent movie about AI, Transcendence, I think it is called, failed (but it was an interesting failure). A third movie about AI, a Spanish movie called Eva, was also brilliant. Eva was more moving and this movie more philosophical. But both movies were perfect in their different ways. The AI's name in this movie, Ava, seems to be a nod to the title of the Spanish movie. As an aside, it's nice that no \\\"stars\\\" appeared in \\\"Ex Machina\\\" and \\\"Eva\\\", the casting was great. Of course there are several aspects of this movie that are unrealistic and often absurd. But because this is an allegorical movie, these are acceptable, because the movie is making points, rather than striving for realism. It's more of a fairytale than accurate portrayal.\",\n          \"Excellent suspense and thriler movie. Every bit of it horrific and worth watching it.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IMDb Rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 10,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          9,\n          10,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Predicted Rating\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          9.899999618530273,\n          0.30000001192092896,\n          9.100000381469727\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Overall Sentiment\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Negative\",\n          \"Positive\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":52}],"source":["new_reviews['Predicted Rating'] = np.round(unseen_sentiments*10,1)\n","\n","df_prediction_sentiments = pd.DataFrame(new_reviews['Predicted Rating'], columns = ['Predicted Rating'])\n","df_movie                 = pd.DataFrame(new_reviews['Movie'], columns = ['Movie'])\n","df_review_text           = pd.DataFrame(new_reviews['Review Text'], columns = ['Review Text'])\n","df_imdb_rating           = pd.DataFrame(new_reviews['IMDb Rating'], columns = ['IMDb Rating'])\n","\n","\n","dfx=pd.concat([df_movie, df_review_text, df_imdb_rating, df_prediction_sentiments], axis=1)\n","import numpy as np\n","dfx['Overall Sentiment'] = np.where(dfx['Predicted Rating'] >= 5, 'Positive', 'Negative')\n","\n","dfx.to_csv(\"/content/drive/MyDrive/Final Year Project/results_new.csv\", sep=',', encoding='UTF-8')\n","\n","dfx"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ept4AbOYhIpJ"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dFWcTLSusUCo"},"outputs":[],"source":[]}],"metadata":{"colab":{"collapsed_sections":["PVa0PkVnFF7j","I1TDt0mHFNsN","4-w3-sM4FobI","WHUazVtLJkxW","J4LnePImJ327","7Ww3YGVCKHqR"],"provenance":[{"file_id":"1LG6rHviTTvw8A_4cr3lwsHprCLakwNIM","timestamp":1713675071986}],"toc_visible":true,"authorship_tag":"ABX9TyMFdPTYL8d+ma+2sW5HPNt6"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}